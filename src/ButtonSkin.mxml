<?xml version="1.0" encoding="utf-8"?>
<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The Spark skin class for the MX Button component. 

@see mx.controls.Button

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:mx="library://ns.adobe.com/flex/mx"
             minWidth="21" minHeight="19"
             alpha.disabledStates="0.5">
  <fx:Metadata>
    [HostComponent("spark.components.Button")]

    [Style(name="icon", type="Class")]
    [Style(name="disableIcon", type="Class")]
    [Style(name="downIcon", type="Class")]
    [Style(name="overIcon", type="Class")]
    [Style(name="selectedDisabledIcon", type="Class")]
    [Style(name="selectedDownIcon", type="Class")]
    [Style(name="selectedOverIcon", type="Class")]
    [Style(name="selectedUpIcon", type="Class")]
    [Style(name="upIcon", type="Class")]
    [Style(name="verticalGap", type="Number", format="Length")]
    [Style(name="horizontalGap", type="Number", format="Length")]
    [Style(name="cornerRadius", type="Number", format="Length")]
    [Style(name="borderColor", type="uint", format="Color")]
    [Style(name="fillColors", type="Array", arrayType="Number")]
    [Style(name="labelPlacement", type="String")]

    <!--
        Can't declare this here because it conflicts with UIComponent's themeColor style
    [Style(name="themeColor", type="uint", format="Color")]
    -->
    [Style(name="fillAlphas", type="Array", arrayType="Number")]
    [Style(name="textRollOverColor", type="uint", format="Color")]
    [Style(name="textSelectedColor", type="uint", format="Color")]
  </fx:Metadata>

  <fx:Script>
    <![CDATA[
    import mx.binding.utils.ChangeWatcher;
    import mx.collections.ArrayCollection;
    import mx.controls.ButtonLabelPlacement;
    import mx.utils.ColorUtil;

    import spark.layouts.BasicLayout;
    import spark.layouts.HorizontalLayout;
    import spark.layouts.VerticalLayout;
    import spark.layouts.supportClasses.LayoutBase;

    [Bindable]
    private var fillColors:ArrayCollection = new ArrayCollection([0xFFFFFF, 0xD8D8D8, 0xBBBDBD, 0x9FA0A1]);
    [Bindable]
    private var fillAlphas:ArrayCollection = new ArrayCollection([0.85, 0.85, 1, 1]);
    [Bindable]
    private var themeColor:uint = 0x929496;
    [Bindable]
    private var borderColor:uint = 0x929496;
    [Bindable]
    private var cornerRadius:Number = 2;
    [Bindable]
    private var labelPlacement:String = ButtonLabelPlacement.RIGHT;
    [Bindable]
    private var verticalGap:Number = 3;
    [Bindable]
    private var horizontalGap:Number = 3;


    override protected function initializationComplete():void {
      useChromeColor = true;
      super.initializationComplete();

      updateStyles();
    }

    override public function stylesInitialized():void {
      super.stylesInitialized();
      updateStyles();
    }

    override public function styleChanged(styleProp:String):void {
      super.styleChanged(styleProp);
      updateStyles();
    }

    private function updateStyles():void {
      var fillColors:Array = getStyle("fillColors");
      if (fillColors != null) {
        this.fillColors = new ArrayCollection(fillColors);
      }

      var fillAlphas:Array = getStyle("fillAlphas");
      if (fillAlphas != null) {
        this.fillAlphas = new ArrayCollection(fillAlphas);
      }

      var themeColor:* = getStyle("themeColor");
      if (themeColor != null) {
        this.themeColor = new uint(themeColor);
      }

      var borderColor:* = getStyle("borderColor");
      if (borderColor != null) {
        this.borderColor = new uint(borderColor);
      }

      var cr:Number = getStyle("cornerRadius");

      if (cornerRadius != cr) {
        cornerRadius = cr;
        shadow.radiusX = cornerRadius;
        fill.radiusX = cornerRadius;
        lowlight.radiusX = cornerRadius;
        highlight.radiusX = cornerRadius;
        border.radiusX = cornerRadius;
      }

      if (highlightStroke) highlightStroke.radiusX = cornerRadius;
      if (hldownstroke1) hldownstroke1.radiusX = cornerRadius;
      if (hldownstroke2) hldownstroke2.radiusX = cornerRadius;

      var horizontalGap:Number = getStyle("horizontalGap");
      if (!isNaN(horizontalGap)) {
        this.horizontalGap = horizontalGap;
      }

      var verticalGap:Number = getStyle("verticalGap");
      if (!isNaN(verticalGap)) {
        this.verticalGap = verticalGap;
      }

      var labelPlacement:String = getStyle("labelPlacement");
      if (labelPlacement != null) {
        this.labelPlacement = labelPlacement;
      }

      updateIcon();
    }

    private function updateIcon(event:Event = null):void {
      trace("getStyle('labelPlacement') = " + getStyle("labelPlacement"));
      trace("getStyle('icon') = " + getStyle("icon"));

      if ((getStyle('icon') != null) || (getStyle('disabledIcon') != null) || (getStyle('downIcon') != null) ||
              (getStyle('overIcon') != null) || (getStyle('selectedDisabledIcon') != null) || (getStyle('selectedDownIcon') != null) ||
              (getStyle('selectedOverIcon') != null) || (getStyle('selectedUpIcon') != null) || (getStyle('upIcon') != null)) {
        if (!iconLabelGroup.visible) {
          iconLabelGroup.visible = true;
          removeElement(labelDisplay);
          iconLabelGroup.addElement(labelDisplay);
        }

        if (labelPlacement == ButtonLabelPlacement.BOTTOM) {
          iconLabelGroup.layout = new VerticalLayout();

          (iconLabelGroup.layout as VerticalLayout).gap = verticalGap;
          iconLabelGroup.setElementIndex(labelDisplay, 1);
        }
        else if (labelPlacement == ButtonLabelPlacement.LEFT) {
          iconLabelGroup.layout = new HorizontalLayout();
          (iconLabelGroup.layout as HorizontalLayout).gap = horizontalGap;
          iconLabelGroup.setElementIndex(labelDisplay, 0);
        }
        else if (labelPlacement == ButtonLabelPlacement.TOP) {
          iconLabelGroup.layout = new VerticalLayout();
          (iconLabelGroup.layout as VerticalLayout).gap = verticalGap;
          iconLabelGroup.setElementIndex(labelDisplay, 0);
        }
        else // (getStyle('labelPlacement') == ButtonLabelPlacement.RIGHT)
        {
          iconLabelGroup.layout = new HorizontalLayout();
          (iconLabelGroup.layout as HorizontalLayout).gap = horizontalGap;
          iconLabelGroup.setElementIndex(labelDisplay, 1);
        }

        (iconLabelGroup.layout as Object).paddingLeft = 10;
        (iconLabelGroup.layout as Object).paddingRight = 10;
        (iconLabelGroup.layout as Object).paddingTop = 4;
        (iconLabelGroup.layout as Object).paddingBottom = 4;
        (iconLabelGroup.layout as Object).verticalAlign = "middle";
        (iconLabelGroup.layout as Object).horizontalAlign = "center";
      }
      else {
        if (iconLabelGroup.visible) {
          iconLabelGroup.visible = false;
          iconLabelGroup.removeElement(labelDisplay);
          addElement(labelDisplay);
        }
      }
    }
    ]]>
  </fx:Script>

  <!-- states -->
  <s:states>
    <s:State name="up"/>
    <s:State name="over" stateGroups="overStates"/>
    <s:State name="down" stateGroups="downStates"/>
    <s:State name="disabled" stateGroups="disabledStates"/>
    <s:State name="selectedUp" stateGroups="selectedStates, selectedUpStates"/>
    <s:State name="selectedOver" stateGroups="overStates, selectedStates"/>
    <s:State name="selectedDown" stateGroups="downStates, selectedStates"/>
    <s:State name="selectedDisabled" stateGroups="selectedUpStates, disabledStates, selectedStates"/>
  </s:states>

  <!-- layer 1: shadow -->
  <!--- @private -->
  <s:Rect id="shadow" left="-1" right="-1" top="-1" bottom="-1" radiusX="2">
    <s:fill>
      <s:LinearGradient rotation="90">
        <s:GradientEntry color="0x000000"
                         color.downStates="0xFFFFFF"
                         alpha="0.01"
                         alpha.downStates="0"/>
        <s:GradientEntry color="0x000000"
                         color.downStates="0xFFFFFF"
                         alpha="0.07"
                         alpha.downStates="0.5"/>
      </s:LinearGradient>
    </s:fill>
  </s:Rect>

  <!-- layer 2: fill -->
  <!--- @private -->
  <s:Rect id="fill" left="1" right="1" top="1" bottom="1" radiusX="2">
    <s:fill>
      <s:LinearGradient rotation="90">
        <s:GradientEntry color="{fillColors.getItemAt(0) as uint}"
                         color.overStates="{fillColors.getItemAt(2) as uint}"
                         color.downStates="{ColorUtil.adjustBrightness(themeColor, 128) as uint}"
                         alpha="{fillAlphas.getItemAt(0) as Number}"
                         alpha.overStates="{fillAlphas.getItemAt(2) as Number}"
                         alpha.downStates="1"
                />
        <s:GradientEntry color="{fillColors.getItemAt(1) as uint}"
                         color.overStates="{fillColors.getItemAt(3) as uint}"
                         color.downStates="{themeColor as uint}"
                         alpha="{fillAlphas.getItemAt(1) as Number}"
                         alpha.overStates="{fillAlphas.getItemAt(3) as Number}"
                         alpha.downStates="1"
                />
      </s:LinearGradient>
    </s:fill>
  </s:Rect>

  <!-- layer 3: fill lowlight -->
  <!--- @private -->
  <s:Rect id="lowlight" left="1" right="1" top="1" bottom="1" radiusX="2">
    <s:fill>
      <s:LinearGradient rotation="270">
        <s:GradientEntry color="0x000000" ratio="0.0" alpha="0.0627"/>
        <s:GradientEntry color="0x000000" ratio="0.48" alpha="0.0099"/>
        <s:GradientEntry color="0x000000" ratio="0.48001" alpha="0"/>
      </s:LinearGradient>
    </s:fill>
  </s:Rect>

  <!-- layer 4: fill highlight -->
  <!--- @private -->
  <s:Rect id="highlight" left="1" right="1" top="1" bottom="1" radiusX="2">
    <s:fill>
      <s:LinearGradient rotation="90">
        <s:GradientEntry color="0xFFFFFF"
                         ratio="0.0"
                         alpha="0.33"
                         alpha.selectedUpStates="0.22"
                         alpha.overStates="0.22"
                         alpha.downStates="0.12"/>
        <s:GradientEntry color="0xFFFFFF"
                         ratio="0.48"
                         alpha="0.33"
                         alpha.selectedUpStates="0.22"
                         alpha.overStates="0.22"
                         alpha.downStates="0.12"/>
        <s:GradientEntry color="0xFFFFFF"
                         ratio="0.48001"
                         alpha="0"/>
      </s:LinearGradient>
    </s:fill>
  </s:Rect>

  <!-- layer 5: highlight stroke (all states except down) -->
  <!--- @private -->
  <s:Rect id="highlightStroke" left="1" right="1" top="1" bottom="1" radiusX="2" excludeFrom="downStates">
    <s:stroke>
      <s:LinearGradientStroke rotation="90" weight="1">
        <s:GradientEntry color="0xFFFFFF" alpha.overStates="0.22" alpha.selectedUpStates="0.33"/>
        <s:GradientEntry color="0xD8D8D8" alpha.overStates="0.22" alpha.selectedUpStates="0.33"/>
      </s:LinearGradientStroke>
    </s:stroke>
  </s:Rect>

  <!-- layer 6: highlight stroke (down state only) -->
  <!--- @private -->
  <s:Rect id="hldownstroke1" left="1" right="1" top="1" bottom="1" radiusX="2"
          includeIn="downStates, selectedUpStates, selectedOver">
    <s:stroke>
      <s:LinearGradientStroke rotation="90" weight="1">
        <s:GradientEntry color="0x000000" alpha="0.25" ratio="0.0"/>
        <s:GradientEntry color="0x000000" alpha="0.25" ratio="0.001"/>
        <s:GradientEntry color="0x000000" alpha="0.07" ratio="0.0011"/>
        <s:GradientEntry color="0x000000" alpha="0.07" ratio="0.965"/>
        <s:GradientEntry color="0x000000" alpha="0.00" ratio="0.9651"/>
      </s:LinearGradientStroke>
    </s:stroke>
  </s:Rect>
  <!--- @private -->
  <s:Rect id="hldownstroke2" left="2" right="2" top="2" bottom="2" radiusX="2"
          includeIn="downStates, selectedUpStates, selectedOver">
    <s:stroke>
      <s:LinearGradientStroke rotation="90" weight="1">
        <s:GradientEntry color="0x000000" alpha="0.09" ratio="0.0"/>
        <s:GradientEntry color="0x000000" alpha="0.00" ratio="0.0001"/>
      </s:LinearGradientStroke>
    </s:stroke>
  </s:Rect>


  <!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
  <!--- @private -->
  <s:Rect id="border" left="0" right="0" top="0" bottom="0" width="69" height="20" radiusX="2">
    <s:stroke>
      <s:LinearGradientStroke rotation="90" weight="1">
        <!--- @private -->
        <s:GradientEntry id="borderEntry1"
                         alpha="0.5625"
                         alpha.down="0.6375"
                         alpha.selectedStates="0.6375"
                         color="{borderColor}"/>
        <!--- @private -->
        <s:GradientEntry id="borderEntry2"
                         alpha="0.75"
                         alpha.down="0.85"
                         alpha.selectedStates="0.85"
                         color="{borderColor}"/>
      </s:LinearGradientStroke>
    </s:stroke>
  </s:Rect>

  <s:Group id="iconLabelGroup" width="100%" height="100%" visible="false">
    <mx:Image id="icon"
              source="{getStyle('icon')}"
              source.disabled="{getStyle('disabledIcon') != null ? getStyle('disabledIcon') : getStyle('icon')}"
              source.down="{getStyle('downIcon') != null ? getStyle('downIcon') : getStyle('icon')}"
              source.over="{getStyle('overIcon') != null ? getStyle('overIcon') : getStyle('icon')}"
              source.selectedDisabled="{getStyle('selectedDisabledIcon') != null ? getStyle('selectedDisabledIcon') : getStyle('icon')}"
              source.selectedDown="{getStyle('selectedDownIcon') != null ? getStyle('selectedDownIcon') : getStyle('icon')}"
              source.selectedOver="{getStyle('selectedOverIcon') != null ? getStyle('selectedOverIcon') : getStyle('icon')}"
              source.selectedUp="{getStyle('selectedUpIcon') != null ? getStyle('selectedUpIcon') : getStyle('icon')}"
              source.up="{getStyle('upIcon') != null ? getStyle('upIcon') : getStyle('icon')}"/>

  </s:Group>

  <!-- layer 8: text -->
  <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
  <s:Label id="labelDisplay"
           textAlign="center"
           verticalAlign="middle"
           maxDisplayedLines="1"
           horizontalCenter="0" verticalCenter="1"
           left="10" right="10" top="2" bottom="2"
           color.overStates="{getStyle('textRollOverColor')}"
           color.selectedStates="{getStyle('textSelectedColor')}"
           color.downStates="{getStyle('textSelectedColor')}"
          >
  </s:Label>

</s:SparkSkin>